;buildInfoPackage: chisel3, version: 3.2-20191106-SNAPSHOT, scalaVersion: 2.12.10, sbtVersion: 1.3.2
circuit AsyncFifo : 
  module AsyncFifo : 
    output io : {flip wr_clk : Clock, flip wr_nrst : AsyncReset, flip wr_en : UInt<1>, flip wdata : UInt<32>, flip rd_clk : Clock, flip rd_nrst : AsyncReset, flip rd_en : UInt<1>, rdata : UInt<32>, empty : UInt<1>, full : UInt<1>}
    
    smem regs : UInt<32>[4] @[AsyncFifo.scala 21:25]
    wire wr_ptr_gray : UInt<3> @[AsyncFifo.scala 22:25]
    wire rd_ptr_gray : UInt<3> @[AsyncFifo.scala 23:25]
    reg _T : UInt<3>, io.wr_clk with : (reset => (io.wr_nrst, UInt<3>("h00"))) @[AsyncFifo.scala 27:29]
    node _T_1 = eq(io.full, UInt<1>("h00")) @[AsyncFifo.scala 28:40]
    node _T_2 = and(io.wr_en, _T_1) @[AsyncFifo.scala 28:37]
    node _T_3 = add(_T_2, _T) @[AsyncFifo.scala 28:59]
    node _T_4 = tail(_T_3, 1) @[AsyncFifo.scala 28:59]
    _T <= _T_4 @[AsyncFifo.scala 29:16]
    node _T_5 = bits(_T, 1, 0) @[AsyncFifo.scala 30:27]
    node _T_6 = eq(io.full, UInt<1>("h00")) @[AsyncFifo.scala 32:22]
    node _T_7 = and(io.wr_en, _T_6) @[AsyncFifo.scala 32:19]
    when _T_7 : @[AsyncFifo.scala 32:31]
      write mport _T_8 = regs[_T_5], io.wr_clk
      _T_8 <= io.wdata
      skip @[AsyncFifo.scala 32:31]
    node _T_9 = shr(_T_4, 1) @[AsyncFifo.scala 36:37]
    node _T_10 = xor(_T_9, _T_4) @[AsyncFifo.scala 36:43]
    wr_ptr_gray <= _T_10 @[AsyncFifo.scala 36:17]
    reg _T_11 : UInt, io.wr_clk @[AsyncFifo.scala 38:31]
    _T_11 <= rd_ptr_gray @[AsyncFifo.scala 38:31]
    reg _T_12 : UInt, io.wr_clk @[AsyncFifo.scala 39:32]
    _T_12 <= _T_11 @[AsyncFifo.scala 39:32]
    node _T_13 = bits(_T_12, 2, 2) @[AsyncFifo.scala 41:35]
    node _T_14 = bits(_T_12, 1, 1) @[AsyncFifo.scala 41:58]
    node _T_15 = xor(_T_13, _T_14) @[AsyncFifo.scala 41:43]
    node _T_16 = bits(wr_ptr_gray, 2, 2) @[AsyncFifo.scala 42:34]
    node _T_17 = bits(wr_ptr_gray, 1, 1) @[AsyncFifo.scala 42:55]
    node _T_18 = xor(_T_16, _T_17) @[AsyncFifo.scala 42:42]
    reg _T_19 : UInt<1>, io.wr_clk with : (reset => (io.wr_nrst, UInt<1>("h00"))) @[AsyncFifo.scala 43:25]
    node _T_20 = bits(wr_ptr_gray, 2, 2) @[AsyncFifo.scala 44:28]
    node _T_21 = bits(_T_12, 2, 2) @[AsyncFifo.scala 44:51]
    node _T_22 = neq(_T_20, _T_21) @[AsyncFifo.scala 44:35]
    node _T_23 = eq(_T_15, _T_18) @[AsyncFifo.scala 45:21]
    node _T_24 = and(_T_22, _T_23) @[AsyncFifo.scala 45:7]
    node _T_25 = bits(wr_ptr_gray, 0, 0) @[AsyncFifo.scala 46:22]
    node _T_26 = bits(_T_12, 0, 0) @[AsyncFifo.scala 46:49]
    node _T_27 = eq(_T_25, _T_26) @[AsyncFifo.scala 46:33]
    node _T_28 = and(_T_24, _T_27) @[AsyncFifo.scala 46:7]
    _T_19 <= _T_28 @[AsyncFifo.scala 44:12]
    io.full <= _T_19 @[AsyncFifo.scala 47:13]
    reg _T_29 : UInt<3>, io.rd_clk with : (reset => (io.rd_nrst, UInt<3>("h00"))) @[AsyncFifo.scala 52:29]
    node _T_30 = eq(io.empty, UInt<1>("h00")) @[AsyncFifo.scala 53:40]
    node _T_31 = and(io.rd_en, _T_30) @[AsyncFifo.scala 53:37]
    node _T_32 = add(_T_31, _T_29) @[AsyncFifo.scala 53:60]
    node _T_33 = tail(_T_32, 1) @[AsyncFifo.scala 53:60]
    _T_29 <= _T_33 @[AsyncFifo.scala 54:16]
    node _T_34 = bits(_T_29, 1, 0) @[AsyncFifo.scala 56:27]
    node _T_35 = eq(io.empty, UInt<1>("h00")) @[AsyncFifo.scala 57:45]
    node _T_36 = and(io.rd_en, _T_35) @[AsyncFifo.scala 57:42]
    wire _T_37 : UInt @[AsyncFifo.scala 57:26]
    _T_37 is invalid @[AsyncFifo.scala 57:26]
    when _T_36 : @[AsyncFifo.scala 57:26]
      _T_37 <= _T_34 @[AsyncFifo.scala 57:26]
      node _T_38 = or(_T_37, UInt<2>("h00")) @[AsyncFifo.scala 57:26]
      node _T_39 = bits(_T_38, 1, 0) @[AsyncFifo.scala 57:26]
      read mport _T_40 = regs[_T_39], io.rd_clk @[AsyncFifo.scala 57:26]
      skip @[AsyncFifo.scala 57:26]
    io.rdata <= _T_40 @[AsyncFifo.scala 57:14]
    node _T_41 = shr(_T_33, 1) @[AsyncFifo.scala 58:37]
    node _T_42 = xor(_T_41, _T_33) @[AsyncFifo.scala 58:43]
    rd_ptr_gray <= _T_42 @[AsyncFifo.scala 58:17]
    reg _T_43 : UInt, io.rd_clk @[AsyncFifo.scala 60:31]
    _T_43 <= wr_ptr_gray @[AsyncFifo.scala 60:31]
    reg _T_44 : UInt, io.rd_clk @[AsyncFifo.scala 61:32]
    _T_44 <= _T_43 @[AsyncFifo.scala 61:32]
    reg _T_45 : UInt<1>, io.rd_clk with : (reset => (io.rd_nrst, UInt<1>("h01"))) @[AsyncFifo.scala 63:26]
    node _T_46 = eq(rd_ptr_gray, _T_44) @[AsyncFifo.scala 64:28]
    _T_45 <= _T_46 @[AsyncFifo.scala 64:13]
    io.empty <= _T_45 @[AsyncFifo.scala 65:14]
    
